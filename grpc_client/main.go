package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	pb "grpcTestProject/userpb"

	"google.golang.org/grpc"
)

// gRPC –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Create, Get, Update, Delete, List –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

func main() {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å gRPC-—Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ –∞–¥—Ä–µ—Å—É localhost:50051
	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

	// –°–æ–∑–¥–∞—ë–º gRPC-–∫–ª–∏–µ–Ω—Ç –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
	client := pb.NewUserServiceClient(conn)

	// –°–æ–∑–¥–∞—ë–º —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å –∫–æ–Ω—Å–æ–ª–∏
	reader := bufio.NewReader(os.Stdin)

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é
	for {
		// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
		fmt.Println("=== –ú–µ–Ω—é ===")
		fmt.Println("1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("2. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
		fmt.Println("3. –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("4. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("5. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		fmt.Println("0. –í—ã—Ö–æ–¥")
		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

		choice, _ := reader.ReadString('\n')
		choice = strings.TrimSpace(choice)

		switch choice {
		case "1":
			// –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
			name := readLine(reader)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ email: ")
			email := readLine(reader)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç: ")
			var age int32
			fmt.Scan(&age)

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 3 —Å–µ–∫—É–Ω–¥—ã
			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			// gRPC-–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ CreateUser
			res, err := client.CreateUser(ctx, &pb.UserRequest{
				Name:  name,
				Email: email,
				Age:   age,
			})
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞:", err)
			} else {
				fmt.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", res.User)
			}
			reader.ReadString('\n') // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ fmt.Scan

		case "2":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
			id := readLine(reader)

			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			// gRPC-–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ GetUser
			res, err := client.GetUser(ctx, &pb.UserID{Id: id})
			if err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			} else {
				fmt.Println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", res.User)
			}

		case "3":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
			id := readLine(reader)
			fmt.Print("–ù–æ–≤–æ–µ –∏–º—è: ")
			name := readLine(reader)
			fmt.Print("–ù–æ–≤—ã–π email: ")
			email := readLine(reader)
			fmt.Print("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
			var age int32
			fmt.Scan(&age)

			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			// gRPC-–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ UpdateUser
			res, err := client.UpdateUser(ctx, &pb.UpdateRequest{
				Id:    id,
				Name:  name,
				Email: email,
				Age:   age,
			})
			if err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			} else {
				fmt.Println("‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:", res.User)
			}
			reader.ReadString('\n')

		case "4":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
			id := readLine(reader)

			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			// gRPC-–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ DeleteUser
			res, err := client.DeleteUser(ctx, &pb.UserID{Id: id})
			if err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			} else {
				fmt.Println("üóëÔ∏è", res.Message)
			}

		case "5":
			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			// gRPC-–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ ListUsers
			res, err := client.ListUsers(ctx, &pb.Empty{})
			if err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			} else if len(res.Users) == 0 {
				fmt.Println("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
			} else {
				fmt.Println("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
				for _, user := range res.Users {
					fmt.Printf("- ID: %s | –ò–º—è: %s | Email: %s | –í–æ–∑—Ä–∞—Å—Ç: %d\n", user.Id, user.Name, user.Email, user.Age)
				}
			}

		case "0":
			fmt.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
			return

		default:
			fmt.Println("‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
		}
	}
}

// readLine ‚Äî —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ stdin
func readLine(r *bufio.Reader) string {
	text, _ := r.ReadString('\n')
	return strings.TrimSpace(text)
}
