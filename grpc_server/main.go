package main

import (
	"context"
	"log"
	"net"

	pb "grpcTestProject/userpb"

	"github.com/google/uuid"
	"google.golang.org/grpc"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
type server struct {
	pb.UnimplementedUserServiceServer
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ gRPC-—Å–µ—Ä–≤–∏—Å–∞

// CreateUser ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UUID
func (s *server) CreateUser(ctx context.Context, req *pb.UserRequest) (*pb.UserResponse, error) {
	id := uuid.New().String()
	user := User{ID: id, Name: req.Name, Email: req.Email, Age: req.Age}
	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
	log.Println("‚û°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user)

	if err := DB.Create(&user).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v\n", err)
		return nil, err
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–æ–≥–∞—Ö
	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=%s, Name=%s\n", user.ID, user.Name)

	return &pb.UserResponse{User: &pb.User{
		Id: user.ID, Name: user.Name, Email: user.Email, Age: user.Age,
	}}, nil
}

// GetUser ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (s *server) GetUser(ctx context.Context, req *pb.UserID) (*pb.UserResponse, error) {
	var user User
	if err := DB.First(&user, "id = ?", req.Id).Error; err != nil {
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω\n", req.Id)
		return nil, err
	}

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=%s\n", user.ID)

	return &pb.UserResponse{User: &pb.User{
		Id: user.ID, Name: user.Name, Email: user.Email, Age: user.Age,
	}}, nil
}

// UpdateUser ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (s *server) UpdateUser(ctx context.Context, req *pb.UpdateRequest) (*pb.UserResponse, error) {
	log.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=%s", req.Id)

	var user User
	if err := DB.First(&user, "id = ?", req.Id).Error; err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=%s\n", req.Id)
		return nil, err
	}

	user.Name = req.Name
	user.Email = req.Email
	user.Age = req.Age

	if err := DB.Save(&user).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: %v", err)
		return nil, err
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: %+v\n", user)

	return &pb.UserResponse{User: &pb.User{
		Id: user.ID, Name: user.Name, Email: user.Email, Age: user.Age,
	}}, nil
}

// DeleteUser ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (s *server) DeleteUser(ctx context.Context, req *pb.UserID) (*pb.DeleteResponse, error) {
	if err := DB.Delete(&User{}, "id = ?", req.Id).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: %v\n", err)
		return nil, err
	}
	log.Printf("üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω: ID=%s", req.Id)
	return &pb.DeleteResponse{Message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω"}, nil
}

// ListUsers ‚Äî –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (s *server) ListUsers(ctx context.Context, req *pb.Empty) (*pb.UserList, error) {
	var users []User
	if err := DB.Find(&users).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err)
		return nil, err
	}

	log.Printf("üìã –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", len(users))

	var pbUsers []*pb.User
	for _, u := range users {
		pbUsers = append(pbUsers, &pb.User{
			Id: u.ID, Name: u.Name, Email: u.Email, Age: u.Age,
		})
	}
	return &pb.UserList{Users: pbUsers}, nil
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
	InitDB()

	// –°–æ–∑–¥–∞–Ω–∏–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å gRPC-—Å–µ—Ä–≤–µ—Ä
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ gRPC-—Å–µ—Ä–≤–µ—Ä–∞
	s := grpc.NewServer()

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ UserService –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	pb.RegisterUserServiceServer(s, &server{})

	log.Println("üöÄ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 50051")

	// –ó–∞–ø—É—Å–∫ gRPC-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ 50051)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
